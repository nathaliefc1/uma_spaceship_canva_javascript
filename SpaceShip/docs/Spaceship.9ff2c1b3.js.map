{"version":3,"sources":["utils/angle2rad.js","utils/checkLimits.js","utils/getRandom.js","src/actors/Asteroid.js","src/actors/Snack.js","src/manager.js","src/actors/Spaceship.js"],"names":["angle2rad","angle","Math","PI","checkLimits","pos","x","y","randomY","floor","random","randomX","asteroidImg","require","Asteroid","size","w","h","asteroidColor","xSpeed","directionX","asteroidSize","image","Image","src","asteroids","asteroidLimit","canvasWidth","frame","ctx","delta","fillStyle","fillRect","drawImage","key","snackImg","Snack","color","snackSize","ySpeed","directionY","canvasHeight","snack","Color","Manager","state","intervalID","snacks","num","spaceShipStatus","chrono","score","gameOver","setInterval","enemy","push","samples","index","splice","object","spaceship","isSnack","xDiff","yDiff","distance","sqrt","toFixed","font","fillText","getChrono","lifeBar","myManager","spaceshipImg","spaceshipBrokeImg","takeSound","Spaceship","spaceshipSize","spaceshipColor","angleSpeed","spaceshipSpeed","spaceshipAcceleration","frameX","frameY","accelarating","take","Audio","newPos","cos","sin","translate","rotate","play"],"mappings":"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","file":"Spaceship.9ff2c1b3.js","sourceRoot":"..","sourcesContent":["const angle2rad = (angle) => (Math.PI / 180) * angle;\r\n\r\nexport default angle2rad;\r\n","const checkLimits = (pos) => {\r\n  if (pos.x < 800 && pos.x > 0 && pos.y < 600 && pos.y > 0) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport default checkLimits;\r\n","const randomY = () => {\r\n  return Math.floor(Math.random() * (600 - 1)) + 1;\r\n};\r\n\r\nconst randomX = () => {\r\n  return Math.floor(Math.random() * (0 + 800) - 800);\r\n};\r\n\r\nexport { randomY, randomX };\r\n\r\n// Retorna un entero aleatorio entre min (incluido) y max (excluido)\r\n// ¡Usando Math.round() te dará una distribución no-uniforme!\r\n// function getRandomInt(min, max) { return Math.floor(Math.random() * (max - min)) + min;}\r\n","import { randomX, randomY } from \"../../utils/getRandom\";\r\nconst asteroidImg = require(\"../../assets/asteroid.png\");\r\n//https://www.pngfind.com/download/xTimJh_asteroid-pixel-art-red-button-hd-png-download/\r\n\r\nclass Asteroid {\r\n  constructor(pos = { x: randomX() - 4, y: randomY() }, size = { w: 25, h: 25 }) {\r\n    this.asteroidColor = \"yellow\";\r\n    this.pos = pos;\r\n    this.xSpeed = 3;\r\n    this.directionX = +1;\r\n    this.asteroidSize = size;\r\n    this.image = new Image();\r\n    this.image.src = asteroidImg;\r\n    this.asteroids = [];\r\n    this.asteroidLimit = 20;\r\n    this.canvasWidth = 800;\r\n  }\r\n\r\n  update(frame) {\r\n    if (this.pos.x <= this.canvasWidth && this.pos.x >= -5) {\r\n      this.pos.x += this.xSpeed * this.directionX;\r\n    } else {\r\n      this.pos.x = randomX();\r\n      this.pos.y = randomY();\r\n    }\r\n  }\r\n\r\n  draw(ctx, delta) {\r\n    ctx.fillStyle = this.asteroidColor;\r\n    ctx.fillRect(this.pos.x, this.pos.y, this.asteroidSize.w - 10, this.asteroidSize.h - 10); // Pinta cuadrado actor\r\n    ctx.drawImage(this.image, this.pos.x - 5, this.pos.y - 5, this.asteroidSize.w, this.asteroidSize.h); // Pinta imagen actor\r\n  }\r\n\r\n  keyboardEventDown(key) { }\r\n  keyboardEventUp(key) { }\r\n\r\n}\r\n\r\nexport { Asteroid };\r\n","import { randomX, randomY } from \"../../utils/getRandom\";\nconst snackImg = require(\"../../assets/snack.png\");\n\nclass Snack {\n    constructor(size = { w: 25, h: 25 }) {\n        this.color = \"green\";\n        this.snackSize = size;\n        this.ySpeed = 1;\n        this.directionY = -1;\n        this.canvasWidth = 800;\n        this.canvasHeight = 600;\n        this.image = new Image();\n        this.image.src = snackImg;\n        this.snack = [];\n        this.pos = {\n            y: this.canvasHeight,\n            x: Math.random() * (800 - 0)\n        }\n    }\n\n    update(frame) {\n        let direction = this.pos.y += this.ySpeed * this.directionY;\n    }\n\n\n    draw(ctx, delta) {\n        ctx.fillStyle = this.Color;\n        //ctx.fillRect(this.pos.x, this.pos.y, this.snackSize.w, this.snackSize.h);\n        ctx.drawImage(this.image, this.pos.x - 5, this.pos.y - 5, this.snackSize.w, this.snackSize.h);\n    }\n\n    keyboardEventDown(key) { }\n    keyboardEventUp(key) { }\n}\n\nexport { Snack }","import { Asteroid } from \"./actors/Asteroid\";\r\nimport { Snack } from \"./actors/Snack\";\r\n\r\nclass Manager {\r\n  constructor() {\r\n    this.state = true;\r\n    this.intervalID = null;\r\n    this.asteroids = [];\r\n    this.snacks = [];\r\n    this.num = 20;\r\n    this.spaceShipStatus = 10;\r\n    this.chrono = 0;\r\n    this.pos = { x: 10, y: 20 };\r\n    this.score = 0;\r\n    this.gameOver = false;\r\n  }\r\n\r\n  start() {\r\n    if (this.state) {\r\n      this.intervalID = setInterval(() => {\r\n        const enemy = new Asteroid();\r\n        this.asteroids.push(enemy);\r\n        const samples = new Snack();\r\n        this.snacks.push(samples);\r\n      }, 5000);\r\n      this.state = false;\r\n    }\r\n  }\r\n\r\n  removeSnack(index) {\r\n    this.snacks.splice(index, 1);\r\n  }\r\n\r\n  removeAsteroid(index) {\r\n    this.asteroids.splice(index, 1);\r\n  }\r\n\r\n  lifeBar() {\r\n    return `${this.spaceShipStatus}/100`\r\n  }\r\n\r\n  getDistance(object, spaceship, isSnack) {\r\n    const xDiff = spaceship.pos.x - object.pos.x;\r\n    const yDiff = spaceship.pos.y - object.pos.y;\r\n    const distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);\r\n    if (distance <= 30) {\r\n      if (isSnack && this.spaceShipStatus < 100) {\r\n        this.spaceShipStatus += 1\r\n      } else if (!isSnack) {\r\n        this.spaceShipStatus -= 1;\r\n      }\r\n    }\r\n    return distance;\r\n  }\r\n\r\n  getChrono() {\r\n    return `${this.chrono.toFixed(2)} sec`;\r\n  }\r\n\r\n  update() {\r\n    this.chrono += 1 / 100;\r\n  }\r\n\r\n  draw(ctx, delta) {\r\n    ctx.font = \"20px Arial\";\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fillText(`Your time is: ${this.getChrono()}`, this.pos.x, this.pos.y);\r\n    ctx.fillText(`Life: ${this.lifeBar()}`, this.pos.x, this.pos.y + 17);\r\n  }\r\n\r\n  keyboardEventDown(key) { }\r\n  keyboardEventUp(key) { }\r\n}\r\n\r\nconst myManager = new Manager();\r\n\r\nexport { myManager };\r\n","import angle2rad from \"../../utils/angle2rad\";\r\nimport checkLimits from \"../../utils/checkLimits\";\r\nimport { Asteroid } from \"./Asteroid\";\r\nimport { myManager } from \"../manager\";\r\n\r\nconst spaceshipImg = require(\"../../assets/UmaSpaceShip.png\");\r\nconst spaceshipBrokeImg = require(\"../../assets/explosion.png\");\r\nconst takeSound = require(\"../../assets/take.flac\");\r\n// image source https://www.pikpng.com/pngvi/iJwTwhi_spaceship-starfish-pixel-art-clipart/\r\n\r\nclass Spaceship {\r\n  constructor(pos = { x: 720, y: 300 }, size = { w: 60, h: 60 }) {\r\n    this.pos = pos;\r\n    this.spaceshipSize = size;\r\n    this.spaceshipColor = \"transparent\";\r\n    this.angle = 0;\r\n    this.angleSpeed = 0;\r\n    this.spaceshipSpeed = 0;\r\n    this.spaceshipAcceleration = 0;\r\n    this.image = new Image();\r\n    this.image.src = spaceshipImg;\r\n    this.frameX = 0;\r\n    this.frameY = 0;\r\n    this.accelarating = false;\r\n    this.take = new Audio(takeSound);\r\n  }\r\n\r\n  update(frame) {\r\n    this.angle += this.angleSpeed;\r\n    this.angleSpeed *= 0.9; // reduce la velocidad en un 90% en cada frame\r\n    this.spaceshipSpeed =\r\n      this.spaceshipSpeed * 0.9 + this.spaceshipAcceleration; // la velocidad se va reduciendo pero la aceleración es constante\r\n\r\n    const newPos = {\r\n      x: this.pos.x + Math.cos(angle2rad(this.angle)) * this.spaceshipSpeed, // el giro es con respecto a la velocidad del ejeX y el ejeY\r\n      y: this.pos.y + Math.sin(angle2rad(this.angle)) * this.spaceshipSpeed, // el giro es con respecto a la velocidad del ejeX y el ejeY\r\n    };\r\n\r\n    //this.pos = newPos;\r\n    if (checkLimits(newPos)) {\r\n      this.pos = newPos;\r\n    }\r\n  }\r\n\r\n  draw(ctx, delta) {\r\n    if (myManager.spaceShipStatus <= 0) {\r\n      this.image.src = spaceshipBrokeImg;\r\n      ctx.drawImage(this.image, 0, 0, 512, 512, this.pos.x - 25, this.pos.y - 27, this.spaceshipSize.w, this.spaceshipSize.h);\r\n      myManager.gameOver = true;\r\n    }\r\n    // draw spaceship\r\n    ctx.translate(this.pos.x, this.pos.y);\r\n    ctx.rotate(angle2rad(this.angle));\r\n    ctx.fillStyle = this.spaceshipColor;\r\n    // Pinta el actor rectángulo rojo\r\n    ctx.fillRect(\r\n      -this.spaceshipSize.h / 6,\r\n      -this.spaceshipSize.w / 6,\r\n      this.spaceshipSize.h / 3,\r\n      this.spaceshipSize.w / 3,\r\n    );\r\n    if (this.accelarating) {\r\n      ctx.drawImage(this.image, 770.4, 1000, 700, 800, - this.spaceshipSize.w / 2, - this.spaceshipSize.h / 2, this.spaceshipSize.w * 1.1, this.spaceshipSize.h * 1.1);\r\n    } else {\r\n      ctx.drawImage(this.image, 3135, 1000, 610, 800, - this.spaceshipSize.w / 2, - this.spaceshipSize.h / 2, this.spaceshipSize.w * 1.1, this.spaceshipSize.h * 1.1); // Pinta la imagen de Uma\r\n    }\r\n  }\r\n\r\n  eatSnack() {\r\n    this.take.play();\r\n  }\r\n\r\n  keyboardEventDown(key) {\r\n    if (key === \"ArrowLeft\") {\r\n      this.angleSpeed = -4;\r\n    } else if (key === \"ArrowRight\") {\r\n      this.angleSpeed = 4;\r\n    } else if (key === \"ArrowDown\") {\r\n      this.spaceshipAcceleration = 1;\r\n    } else if (key === \"ArrowUp\") {\r\n      this.spaceshipAcceleration = -1;\r\n      this.accelarating = true;\r\n    }\r\n  }\r\n  keyboardEventUp(key) {\r\n    if (key === \"ArrowDown\") {\r\n      this.spaceshipAcceleration = 0;\r\n    } else if (key === \"ArrowUp\") {\r\n      this.spaceshipAcceleration = 0;\r\n      this.accelarating = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport { Spaceship };\r\n"]}